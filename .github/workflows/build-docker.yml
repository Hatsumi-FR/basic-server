name: Build, Test and Push Docker Image

on:
  push:
    branches: [ "master", "main", "develop" ]
  pull_request:
    branches: [ "master", "main", "develop" ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'

      - name: Run unit tests
        run: go test ./...

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/golang-app:latest .


      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/golang-app:latest

  automated-api-tests:
    runs-on: ubuntu-latest
    needs: build-test-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start app stack with Docker Compose
        run: docker compose up -d

      - name: Wait for API to be ready
        run: |
          echo "Waiting for API to be ready..."
          for i in {1..20}; do
            if curl -s http://localhost:8080/healthz > /dev/null; then
              echo "API is up!"
              break
            fi
            sleep 3
          done
      - uses: actions/checkout@v4
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
      - name: Run API tests
        run: |
          postman collection run "9178410-6f8bab6c-f595-4b3b-9012-c60e3b7ea416"

  deploy:
    runs-on: ubuntu-latest
    needs: build-test-deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy code to OVH VM
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.OVH_VM_HOST }}
          username: ${{ secrets.OVH_VM_USER }}
          key: ${{ secrets.OVH_SSH_KEY }}
          source: "."
          target: "/home/${{ secrets.OVH_VM_USER }}/app"

      - name: SSH into OVH VM and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.OVH_VM_HOST }}
          username: ${{ secrets.OVH_VM_USER }}
          key: ${{ secrets.OVH_SSH_KEY }}
          script: |
            set -e

            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "Docker not found. Installing..."
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo usermod -aG docker $USER
            else
              echo "✅ Docker is already installed."
            fi

            # Install Docker Compose if not present
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose not found. Installing..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
                -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose || true
            else
              echo "✅ Docker Compose is already installed."
            fi

            # Déploiement sur OVH
            cd /home/${{ secrets.OVH_VM_USER }}/app

            docker-compose down || true
            docker-compose up -d --build